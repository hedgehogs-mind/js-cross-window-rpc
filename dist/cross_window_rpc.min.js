function callCrossWindowExecutor(a,b,c,d,e=2e3){window.CROSS_COMM_INDEX||(window.CROSS_COMM_INDEX=0);const f=window.CROSS_COMM_INDEX++;return new Promise((g,h)=>{function i(a){if(a.data){const d=a.data;d.commIndex===f&&d.commChannel===b&&"response"===d.commType&&d.method===c&&(console.debug(`Sender: Received response. [commChannel: '${d.commChannel}', commIndex: ${d.commIndex}]`),j=!0,null!==k&&clearTimeout(k),window.removeEventListener("message",i),d.success?d.result?g(d.result):g():h(d.result?d.result:new Error("Remote call returned with success = false. No error message given.")))}}let j=!1,k=null;window.addEventListener("message",i);const l={commIndex:f,commChannel:b,commType:"request",method:c,args:!d?[]:d};a.postMessage(l,"*"),console.debug(`Sender: Sent request. [commChannel: '${l.commChannel}', commIndex: ${l.commIndex}]`),j||(k=setTimeout(()=>{window.removeEventListener("message",i),h(new Error(`Remote call timeout. Got no response from called window after ${e} ms.`))},e))})}function createCrossWindowExecutorProxy(a,b,c=2e3){return new Proxy({},{get:function(d,e){return function(){return callCrossWindowExecutor(a,b,e,[...arguments],c)}}})}function setupCrossWindowExecutor(a,b){const c=function(c){const d=c.data;if(d&&d.commChannel===b&&"request"===d.commType&&void 0!==d.commIndex){console.debug(`Receiver: Received request. [commChannel: '${d.commChannel}', commIndex: ${d.commIndex}]`);let e=!1,f=null;if(!d.method)f="method name was empty/not given";else{const b=a[d.method];if(void 0===b)f=`'${d.method}' does not exist`;else if("function"!=typeof b.apply)f=`'${d.method}' is not a function`;else try{f=b.apply(a,Array.isArray(d.args)?d.args:[]),e=!0}catch(a){f=a.toString()}}Promise.resolve(f).then(a=>{const f={commIndex:d.commIndex,commChannel:b,commType:"response",method:d.method,success:e};void 0!==a&&null!==a&&(f.result=a),c.source.postMessage(f,"*"),console.debug(`Receiver: Finished receiver side execution. Sent response. [commChannel: '${d.commChannel}', commIndex: ${d.commIndex}]`)}).catch(a=>{const e={commIndex:d.commIndex,commChannel:b,commType:"response",method:d.method,success:!1};void 0!==a&&null!==a&&(e.result=a),c.source.postMessage(e,"*")})}};return window.addEventListener("message",c),c}function setupCrossWindowMessageRelay(a,b){this.commIndexSources={};const c=function(c){const d=c.data;if(d&&d.commChannel===b&&void 0!==d.commIndex)if("request"===d.commType)console.debug(`Relay: Received request. Redirecting request to relay target. [commChannel: '${d.commChannel}', commIndex: ${d.commIndex}]`),a.postMessage(d,"*"),this.commIndexSources[d.commIndex.toString()]=c.source;else if("response"===d.commType){console.debug(`Relay: Received respone. Sending response back to source. [commChannel: '${d.commChannel}', commIndex: ${d.commIndex}]`);const a=this.commIndexSources[d.commIndex.toString()];a.postMessage(d,"*")}};return window.addEventListener("message",c),c}